import * as dotenv from "dotenv";
import cron from "node-cron";
import TelegramBot from "node-telegram-bot-api";
import { parseButtonsWithRetry } from "./parser";
import {
    getFormattedTime,
    sendError,
    sendManualStatus,
    sendOperational,
    sendStartupNotification,
    sendStatusChange,
} from "./notifier";
import { ParseResult } from "./types";

// Load environment variables
dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;

// Validate environment variables
if (!BOT_TOKEN || !CHAT_ID) {
    console.error("‚ùå Missing required environment variables:");
    if (!BOT_TOKEN) console.error("  - BOT_TOKEN");
    if (!CHAT_ID) console.error("  - CHAT_ID");
    console.error(
        "\nPlease check your .env file and ensure all required variables are set.",
    );
    process.exit(1);
}

// Initialize Telegram bot
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// In-memory state for status tracking
let previousStatus: ParseResult | null = null;
let isChecking = false; // Prevent concurrent checks

/**
 * Checks button statuses and sends notifications if changes detected
 */
async function checkAndNotify(): Promise<void> {
    if (isChecking) {
        console.log("‚è≥ Check already in progress, skipping...");
        return;
    }

    isChecking = true;

    try {
        console.log("üîç Starting status check...");
        const result = await parseButtonsWithRetry();
        const now = getFormattedTime();

        // Check for changes and notify
        if (previousStatus) {
            // Check –ê–∫—Ç–æ–±–µ match
            if (!previousStatus.aktobe.isEnabled && result.aktobe.isEnabled) {
                console.log("üé´ –ê–∫—Ç–æ–±–µ match tickets became available!");
                await sendStatusChange(
                    bot,
                    CHAT_ID!,
                    "–ú–∞—Ç—á —Å –ê–∫—Ç–æ–±–µ",
                    result.aktobe.href,
                );
            }

            // Check –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ match
            if (
                !previousStatus.realMadrid.isEnabled &&
                result.realMadrid.isEnabled
            ) {
                console.log("üé´ –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ match tickets became available!");
                await sendStatusChange(
                    bot,
                    CHAT_ID!,
                    "–ú–∞—Ç—á —Å –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥",
                    result.realMadrid.href,
                );
            }
        } else {
            console.log("üìù Initial status check - no notifications sent");
        }

        // Update previous status
        previousStatus = result;

        console.log(`‚úÖ Check completed at ${now}:`);
        console.log(
            `   –ê–∫—Ç–æ–±–µ match: ${
                result.aktobe.isEnabled ? "enabled" : "disabled"
            }`,
        );
        console.log(
            `   –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥ match: ${
                result.realMadrid.isEnabled ? "enabled" : "disabled"
            }`,
        );
    } catch (error) {
        const errorText = error instanceof Error
            ? error.message
            : "Unknown error";
        console.error("‚ùå Error during status check:", errorText);
        await sendError(bot, CHAT_ID!, errorText);
    } finally {
        isChecking = false;
    }
}

// Schedule checks every 5 minutes
cron.schedule("*/2 * * * *", () => {
    console.log("‚è∞ Scheduled check triggered");
    checkAndNotify().catch(console.error);
});

// Schedule operational notification every 3 hours
cron.schedule("0 */3 * * *", async () => {
    console.log("üì¢ Sending operational notification");
    try {
        await sendOperational(bot, CHAT_ID);
    } catch (error) {
        console.error("‚ùå Failed to send operational notification:", error);
    }
});

// Handle manual status check via Telegram command
bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id.toString();

    // Security: Only allow from configured chat ID
    if (chatId !== CHAT_ID) {
        console.log(`üö´ Unauthorized access attempt from chat ID: ${chatId}`);
        return;
    }

    console.log("üì± Manual status check requested");

    try {
        const result = await parseButtonsWithRetry();
        await sendManualStatus(bot, chatId, result);
    } catch (error) {
        const errorText = error instanceof Error
            ? error.message
            : "Unknown error";
        console.error("‚ùå Error during manual status check:", errorText);
        await sendError(bot, chatId, errorText);
    }
});

// Handle help command
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id.toString();

    if (chatId !== CHAT_ID) {
        return;
    }

    const helpMessage = `ü§ñ Kairat Notify Bot - –°–ø—Ä–∞–≤–∫–∞\n\n` +
        `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–æ–≤\n` +
        `‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
        `‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n` +
        `‚Ä¢ –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\n` +
        `‚Ä¢ –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ - –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n` +
        `üé´ –°–æ–±—ã—Ç–∏—è:\n` +
        `‚Ä¢ –ú–∞—Ç—á —Å –ê–∫—Ç–æ–±–µ\n` +
        `‚Ä¢ –ú–∞—Ç—á —Å –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥\n\n` +
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å "–æ—Ç–∫–ª—é—á–µ–Ω–æ" –Ω–∞ "–≤–∫–ª—é—á–µ–Ω–æ"`;

    try {
        await bot.sendMessage(chatId, helpMessage);
    } catch (error) {
        console.error("‚ùå Failed to send help message:", error);
    }
});

// Handle bot errors
bot.on("error", (error) => {
    console.error("‚ùå Telegram bot error:", error);
});

bot.on("polling_error", (error) => {
    console.error("‚ùå Telegram polling error:", error);
});

// Startup sequence
async function startBot(): Promise<void> {
    try {
        console.log("üöÄ Starting Kairat Notify Bot...");
        console.log(`üì± Bot Token: ${BOT_TOKEN!.substring(0, 10)}...`);
        console.log(`üí¨ Chat ID: ${CHAT_ID}`);

        // Send startup notification
        await sendStartupNotification(bot, CHAT_ID!);

        // Perform initial check
        console.log("üîç Performing initial status check...");
        await checkAndNotify();

        console.log("‚úÖ Bot started successfully!");
        console.log("‚è∞ Monitoring every 5 minutes...");
        console.log("üì¢ Operational notifications every 3 hours...");
        console.log("üí° Send /status to check manually");
    } catch (error) {
        console.error("‚ùå Failed to start bot:", error);
        process.exit(1);
    }
}

// Handle graceful shutdown
process.on("SIGINT", () => {
    console.log("\nüõë Received SIGINT, shutting down gracefully...");
    bot.stopPolling();
    process.exit(0);
});

process.on("SIGTERM", () => {
    console.log("\nüõë Received SIGTERM, shutting down gracefully...");
    bot.stopPolling();
    process.exit(0);
});

// Start the bot
startBot().catch(console.error);
