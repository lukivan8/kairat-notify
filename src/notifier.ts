import TelegramBot from "node-telegram-bot-api";
import { formatInTimeZone } from "date-fns-tz";
import { ParseResult } from "./types";

const TIMEZONE = "Asia/Almaty"; // GMT+5 equivalent

/**
 * Gets the current time formatted for GMT+5 timezone
 * @returns string - Formatted timestamp
 */
export function getFormattedTime(): string {
    const now = new Date();
    return formatInTimeZone(now, TIMEZONE, "yyyy-MM-dd HH:mm");
}

/**
 * Sends a notification message to Telegram
 * @param bot - Telegram bot instance
 * @param chatId - Target chat ID
 * @param message - Message to send
 */
export async function sendNotification(
    bot: TelegramBot,
    chatId: string,
    message: string,
): Promise<void> {
    try {
        await bot.sendMessage(chatId, message);
        console.log("Notification sent:", message);
    } catch (error) {
        console.error("Failed to send notification:", error);
        throw error;
    }
}

/**
 * Sends a status change notification when tickets become available
 * @param bot - Telegram bot instance
 * @param chatId - Target chat ID
 * @param eventTitle - Name of the event (Control Event or Main Event)
 * @param href - Link to the tickets
 */
export async function sendStatusChange(
    bot: TelegramBot,
    chatId: string,
    eventTitle: string,
    href: string,
): Promise<void> {
    const message =
        `üé´ –î–ª—è —Å–æ–±—ã—Ç–∏—è "${eventTitle}" —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –±–∏–ª–µ—Ç—ã –≤ –ø—Ä–æ–¥–∞–∂–µ!\n\nüîó –°—Å—ã–ª–∫–∞: ${href}`;
    await sendNotification(bot, chatId, message);
}

/**
 * Sends operational status notification every 3 hours
 * @param bot - Telegram bot instance
 * @param chatId - Target chat ID
 */
export async function sendOperational(
    bot: TelegramBot,
    chatId: string,
): Promise<void> {
    const lastTime = getFormattedTime();
    const message =
        `‚úÖ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –±–µ–∑ –æ—à–∏–±–æ–∫.\n\nüïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: ${lastTime} (GMT+5)`;
    await sendNotification(bot, chatId, message);
}

/**
 * Sends error notification when something goes wrong
 * @param bot - Telegram bot instance
 * @param chatId - Target chat ID
 * @param errorText - Error description
 */
export async function sendError(
    bot: TelegramBot,
    chatId: string,
    errorText: string,
): Promise<void> {
    const timestamp = getFormattedTime();
    const message =
        `‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:\n\n${errorText}\n\nüïê –í—Ä–µ–º—è: ${timestamp} (GMT+5)`;
    await sendNotification(bot, chatId, message);
}

/**
 * Sends manual status check response
 * @param bot - Telegram bot instance
 * @param chatId - Target chat ID
 * @param result - Current button statuses
 */
export async function sendManualStatus(
    bot: TelegramBot,
    chatId: string,
    result: ParseResult,
): Promise<void> {
    const timestamp = getFormattedTime();

    const aktobeStatus = result.aktobe.isEnabled
        ? `‚úÖ –í–∫–ª—é—á–µ–Ω–æ (–°—Å—ã–ª–∫–∞: ${result.aktobe.href})`
        : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ";

    const realMadridStatus = result.realMadrid.isEnabled
        ? `‚úÖ –í–∫–ª—é—á–µ–Ω–æ (–°—Å—ã–ª–∫–∞: ${result.realMadrid.href})`
        : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ";

    const message = `üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–æ–≤:\n\n` +
        `üéØ –ú–∞—Ç—á —Å –ê–∫—Ç–æ–±–µ: ${aktobeStatus}\n` +
        `üéØ –ú–∞—Ç—á —Å –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥: ${realMadridStatus}\n\n` +
        `üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${timestamp} (GMT+5)` +
        "\n\n" +
        `–ò—Å—Ç–æ—á–Ω–∏–∫: https://fckairat.com/match`;

    await sendNotification(bot, chatId, message);
}

/**
 * Sends startup notification when bot starts
 * @param bot - Telegram bot instance
 * @param chatId - Target chat ID
 */
export async function sendStartupNotification(
    bot: TelegramBot,
    chatId: string,
): Promise<void> {
    const timestamp = getFormattedTime();
    const message = `üöÄ Kairat Notify Bot –∑–∞–ø—É—â–µ–Ω!\n\n` +
        `üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${timestamp} (GMT+5)\n` +
        `‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n` +
        `üì¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞\n\n` +
        `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏`;

    await sendNotification(bot, chatId, message);
}
